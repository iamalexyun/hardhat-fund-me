{
  "language": "Solidity",
  "sources": {
    "contracts/FundMe.sol": {
      "content": "//Get funds from users\r\n//Withdraw funds\r\n//Set a minimum funding value in USD\r\n// SPDX-License-Identifier: MIT\r\n//pramge\r\npragma solidity ^0.8.9;\r\n//imports\r\nimport \"./PriceConverter.sol\";\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\n//constant, immutable\r\n//error codes\r\nerror FundMe__NotOwner();\r\n\r\n//interfaces, library, contracts\r\n/** @title A contract for crowdfunding\r\n *  @author Alex Yun\r\n *  @notice This contract is to demo a sample funding contract\r\n *  @dev This implements price feeds as our library\r\n */\r\ncontract FundMe {\r\n    //type declarations\r\n    using PriceConverter for uint256;\r\n    // State variables\r\n    uint256 public constant MINIMUM_USD = 50 * 1e18; //gas inefficient\r\n    address[] public s_funders;\r\n    mapping(address => uint256) private s_addressToAmountFunded;\r\n    address private immutable i_owner;\r\n    AggregatorV3Interface public s_priceFeed;\r\n\r\n    modifier onlyOwner() {\r\n        // require(msg.sender == i_owner, \"Sender is not owner!\");\r\n        if (msg.sender != i_owner) {\r\n            revert FundMe__NotOwner();\r\n        }\r\n        _;\r\n    }\r\n\r\n    constructor(address priceFeedAddress) {\r\n        i_owner = msg.sender;\r\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\r\n    }\r\n\r\n    /**\r\n     *  @notice This function fund the contract\r\n     *  @dev This implements price feeds as our library\r\n     */\r\n    function fund() public payable {\r\n        require(\r\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\r\n            \"Didnt't send enough\"\r\n        ); //1e18 = 1 * 10 ** 18\r\n        s_funders.push(msg.sender);\r\n        s_addressToAmountFunded[msg.sender] =\r\n            s_addressToAmountFunded[msg.sender] +\r\n            msg.value;\r\n    }\r\n\r\n    function withdraw() public onlyOwner {\r\n        for (uint256 i = 0; i < s_funders.length; i++) {\r\n            address funder = s_funders[i];\r\n            s_addressToAmountFunded[funder] = 0;\r\n        }\r\n        s_funders = new address[](0);\r\n        (bool callSuccess, ) = payable(msg.sender).call{\r\n            value: address(this).balance\r\n        }(\"\");\r\n        require(callSuccess, \"Call failed!\");\r\n    }\r\n\r\n    function cheaperWithdraw() public payable onlyOwner {\r\n        address[] memory funders = s_funders;\r\n        for (uint256 i = 0; i < funders.length; i++) {\r\n            address funder = funders[i];\r\n            s_addressToAmountFunded[funder] = 0;\r\n        }\r\n        s_funders = new address[](0);\r\n        (bool callSuccess, ) = payable(msg.sender).call{\r\n            value: address(this).balance\r\n        }(\"\");\r\n        require(callSuccess, \"Call failed!\");\r\n    }\r\n\r\n    function getOwner() public view returns (address) {\r\n        return i_owner;\r\n    }\r\n\r\n    function getFunder(uint256 index) public view returns (address) {\r\n        return s_funders[index];\r\n    }\r\n\r\n    function getAddressToAmountFunded(address funder)\r\n        public\r\n        view\r\n        returns (uint256)\r\n    {\r\n        return s_addressToAmountFunded[funder];\r\n    }\r\n\r\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\r\n        return s_priceFeed;\r\n    }\r\n}\r\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.9;\r\n\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\n\r\nlibrary PriceConverter {\r\n    function getPrice(AggregatorV3Interface priceFeed)\r\n        internal\r\n        view\r\n        returns (uint256)\r\n    {\r\n        (, int256 price, , , ) = priceFeed.latestRoundData();\r\n        return uint256(price * 1e10);\r\n    }\r\n\r\n    function getConversionRate(\r\n        uint256 _ethAmount,\r\n        AggregatorV3Interface priceFeed\r\n    ) internal view returns (uint256) {\r\n        uint256 ethPrice = getPrice(priceFeed);\r\n        uint256 ethAmountInUSD = (ethPrice * _ethAmount) / 1e18;\r\n        return ethAmountInUSD;\r\n    }\r\n}\r\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  // getRoundData and latestRoundData should both raise \"No data present\"\n  // if they do not have data to report, instead of returning unset values\n  // which could be misinterpreted as actual reported values.\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}